'''–ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ,
–≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç
–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞).
–°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏.
'''

import random

txt = 'To be, or not to be, that is the question'

# —Å—Ç—Ä–æ–∫–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
dict_lower = 'abcdefghijklmnopqrstuvwxyz'
dict_upper = ''.join([dict_lower[i].upper() for i in range(len(dict_lower))])

lst = []
encrypted_txt = ''

start_pos = 0
end_pos = 0
for i in range(len(txt)):
    if txt[i].isalpha():
        if i < len(txt) - 1:
            continue
        else:
            end_pos = i + 1
            lst.append(txt[start_pos:end_pos])
    else:
        end_pos = i
        lst.append(txt[start_pos:end_pos])
        start_pos = i
        if i < len(txt) - 1 and txt[i + 1].isalpha():
            lst.append(txt[i])
            start_pos, end_pos = i + 1, i + 1
        elif i == len(txt) - 1:
            lst.append(txt[i])

for i in range(len(lst)):
    for j in range(len(lst[i])):
        if lst[i][j] in dict_lower:
            encrypted_txt += dict_lower[(dict_lower.find(lst[i][j]) + len(lst[i])) % len(dict_lower)]
        elif lst[i][j] in dict_upper:
            encrypted_txt += dict_upper[(dict_upper.find(lst[i][j]) + len(lst[i])) % len(dict_upper)]
        else:
            encrypted_txt += lst[i][j]
print(lst)
print(encrypted_txt)


